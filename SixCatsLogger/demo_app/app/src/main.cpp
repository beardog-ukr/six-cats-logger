#include "CLOptionsProcessor.h"
#include "SixCatsLogger.h"

#include "BasicC6MacroDemo.h"

#include <iostream> // cout
#include <cstdlib> // exit
#include <string> // stoi

using namespace std;

struct AppSettings {
  SixCatsLogger::LogLevel logLevel;
  // other settings may be added later
};

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

struct AppCommandLoneOptions {
  char help;
  string helpLong;
  char version;
  string versionLong;
  char logLevel;
  string logLevelLong;
};

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

static const AppCommandLoneOptions appCommandLoneOptions = {
  .help = 'h',
  .helpLong = "help",
  .version = 'v',
  .versionLong = "version",
  .logLevel = 'l',
  .logLevelLong = "level"
};

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

static const string appMessage = "quick brown fox jumps over the lazy dog";

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

void printHelp() {
  //TODO: write text
  //use recommendations from https://stackoverflow.com/questions/9725675/is-there-a-standard-format-for-command-line-shell-help-text
  cout << "This application prints some strings" << endl;
}

void printVersion() {
  //TODO: use version generated by cmake
  cout << " 0.0.1" << endl;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

void processCommandLineOptions(int argc, char *argv[], AppSettings& appSettings) {
  CLOptionsProcessor clop;
  clop.addExpectedOption(appCommandLoneOptions.help, appCommandLoneOptions.helpLong, false);
  clop.addExpectedOption(appCommandLoneOptions.version, appCommandLoneOptions.versionLong, false);
  clop.addExpectedOption(appCommandLoneOptions.logLevel, appCommandLoneOptions.logLevelLong, true);

  if (!clop.process(argc, argv)) {
    cout << "Error: something wrong with command line options";
    exit(1);
  }

  if (clop.hasOption(appCommandLoneOptions.help)) {
    printHelp();
    exit(0);
  }

  if (clop.hasOption(appCommandLoneOptions.version)) {
    printVersion();
    exit(0);
  }

  appSettings.logLevel = SixCatsLogger::Debug; //default value
  if (clop.hasOption(appCommandLoneOptions.logLevel)) {
    const string tmps = clop.getOptionValue(appCommandLoneOptions.logLevel);
    const int intLL =  stoi(tmps);
    //TODO: check for errors and exit here
    //TODO: allow string level spec
    //TODO: better another conversion method
    //https://stackoverflow.com/questions/194465/how-to-parse-a-string-to-an-int-in-c/6154614#6154614

    if ((intLL < 0)||(intLL>=6)) {
      cout << "Error: incorrect log level value" << endl;
      exit(1);
    }

    const SixCatsLogger::LogLevel logLevelValues[6] =    {
      SixCatsLogger::Critical, SixCatsLogger::Warning,
      SixCatsLogger::Info, SixCatsLogger::Debug,
      SixCatsLogger::Trace, SixCatsLogger::Flood
    };

    appSettings.logLevel = logLevelValues[intLL];
  }
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// string getPartThree() {
//   cout << "This should be never printed" << endl;
//   return "s, a number ";
// }


// string getPartThreeSpecial() {
//   cout << "This should be never printed" << endl;
//   return "s, a number ";
// }

// void showMacro() {

//   string partOne = "I'll have two number ";
//   int partTwo = 9;
//   //string partThree = "s, a number ";
//   //int partFour = 9;
//   //string restStr =  " large ...";

//   SixCatsLogger* c6 = new SixCatsLogger(SixCatsLogger::Debug);

//   C6_D1(c6, partOne);
//   C6_D2(c6, partOne, partTwo);
//   C6_D3(c6, partOne, partTwo, getPartThree());
//   C6_D4(c6, partOne, partTwo, getPartThree(), 3*3);
//   C6_D5(c6, partOne, partTwo, getPartThree(), 3*3, " large <etc>");

//   C6_D2(c6, partOne, getPartThree());
//   c6->setLogLevel(SixCatsLogger::Info);
//   C6_D2(c6, partOne, getPartThree());

//   delete c6;
// }

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

void showLambda(const SixCatsLogger::LogLevel logLevel) {
  SixCatsLogger* c6 = new SixCatsLogger(logLevel);

  string firstStr = "I'll have two number 9s, a number ";//9 large, a number 6 with extra dip,
  //a number 7, two number 45s, one with cheese, and a large soda.
  int numberNine = 9;
  string restStr =  " large ...";

  cout << "This is example of lib output with lambda capturing some variables:" <<
    endl;
  c6->c([firstStr, numberNine, restStr]() -> std::string {
    ostringstream ss;
    ss << firstStr << numberNine << restStr;
    return ss.str();
  });
  c6->w([firstStr, numberNine, restStr]() -> std::string {
    ostringstream ss;
    ss << firstStr << numberNine << restStr;
    return ss.str();
  });
  c6->i([firstStr, numberNine, restStr]() -> std::string {
    ostringstream ss;
    ss << firstStr << numberNine << restStr;
    return ss.str();
  });
  c6->d([firstStr, numberNine, restStr]() -> std::string {
    ostringstream ss;
    ss << firstStr << numberNine << restStr;
    return ss.str();
  });
  c6->t([firstStr, numberNine, restStr]() -> std::string {
    ostringstream ss;
    ss << firstStr << numberNine << restStr;
    return ss.str();
  });
  c6->f([firstStr, numberNine, restStr]() -> std::string {
    ostringstream ss;
    ss << firstStr << numberNine << restStr;
    return ss.str();
  });
  cout << "That's all expected from 1 fo 6 lines depending on log level" << endl;

  delete c6;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

void showLambdaAndMethodName(const SixCatsLogger::LogLevel logLevel) {
  SixCatsLogger* c6 = new SixCatsLogger(logLevel);

  string firstStr = "I'll have two number 9s, a number ";//9 large, a number 6 with extra dip,
  //a number 7, two number 45s, one with cheese, and a large soda.
  int numberNine = 9;
  string restStr =  " large ...";

  cout << "This is example of lib output with method name and lambda capturing some variables:" <<
    endl;
  c6->c(__c6_MN__, [firstStr, numberNine, restStr]() -> std::string {
    ostringstream ss;
    ss << firstStr << numberNine << restStr;
    return ss.str();
  });
  c6->w(__c6_MN__, [firstStr, numberNine, restStr]() -> std::string {
    ostringstream ss;
    ss << firstStr << numberNine << restStr;
    return ss.str();
  });
  c6->i(__c6_MN__, [firstStr, numberNine, restStr]() -> std::string {
    ostringstream ss;
    ss << firstStr << numberNine << restStr;
    return ss.str();
  });
  c6->d(__c6_MN__, [firstStr, numberNine, restStr]() -> std::string {
    ostringstream ss;
    ss << firstStr << numberNine << restStr;
    return ss.str();
  });
  c6->t(__c6_MN__, [firstStr, numberNine, restStr]() -> std::string {
    ostringstream ss;
    ss << firstStr << numberNine << restStr;
    return ss.str();
  });
  c6->f(__c6_MN__, [firstStr, numberNine, restStr]() -> std::string {
    ostringstream ss;
    ss << firstStr << numberNine << restStr;
    return ss.str();
  });
  cout << "That's all expected from 1 fo 6 lines depending on log level" << endl;

  delete c6;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

void showMethodName(const SixCatsLogger::LogLevel logLevel) {
  SixCatsLogger* c6 = new SixCatsLogger(logLevel);

  cout << "This is example of lib output with method name included:" << endl;
  c6->c(__c6_MN__, appMessage);
  c6->w(__c6_MN__, appMessage);
  c6->i(__c6_MN__, appMessage);
  c6->d(__c6_MN__, appMessage);
  c6->t(__c6_MN__, appMessage);
  c6->f(__c6_MN__, appMessage);
  cout << "That's all expected from 1 fo 6 lines depending on log level" << endl;

  delete c6;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

void showSimplest(const SixCatsLogger::LogLevel logLevel) {
  SixCatsLogger* c6 = new SixCatsLogger(logLevel);

  cout << "This is example of lib usage:" << endl;
  c6->c(appMessage);
  c6->w(appMessage);
  c6->i(appMessage);
  c6->d(appMessage);
  c6->t(appMessage);
  c6->f(appMessage);
  cout << "That's all expected from 1 fo 6 lines depending on log level" << endl;

  delete c6;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

int main(int argc, char *argv[]) {
  AppSettings appSettings;

  processCommandLineOptions(argc, argv, appSettings);

  BasicC6MacroDemo bmd(appSettings.logLevel);

  bmd.showWarningMacro();
  bmd.showInfoMacro();
  bmd.showDebugMacro();
  bmd.showTraceMacro();
  bmd.showFloodMacro();

  // showSimplest(appSettings.logLevel);
  // showMethodName(appSettings.logLevel);
  // showLambda(appSettings.logLevel);
  // showLambdaAndMethodName(appSettings.logLevel);

  return 0;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
